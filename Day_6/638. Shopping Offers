

🛒 Shopping Offers Problem  
📅 Date: [06-01-2025]  
🖥️ Platform: [LeetCode/GFG]  
⚡ Difficulty: [Easy/Medium/Hard]  

🔍 Problem Understanding  
- 🎯 Input/Output format: List of item prices, special bundle offers, and required item quantities  
- 📏 Constraints: Limited number of items and offers  
- 🔄 Edge cases: No valid offers, all offers exceed needs, single item needs  

💡 Approach  
1️⃣ Initial thoughts  
   - Try all possible ways to buy items  
   - Use recursion to explore different purchase options  

2️⃣ Optimal solution  
   - Backtracking + Memoization (Dynamic Programming)  
   - Check direct price vs. using special offers  
   - Use a hash map to store computed results and avoid redundant calculations  

3️⃣ Time/Space Complexity  
   - Time Complexity: Exponential in worst case, but reduced with memoization  
   - Space Complexity: O(N) due to recursive calls and memoization storage  

📝 Pseudo Code  
```plaintext
define a hashmap `dp` to store results
function shoppingOffers(price, special, needs):
    if needs already computed in dp, return stored result
    compute cost without offers
    for each special offer:
        if offer is valid:
            reduce needs based on offer
            recursively compute min cost including the offer
            restore needs after recursion
    store min cost in dp and return it
```

💻 Code Template  
```java
class Solution {
    private Map<List<Integer>, Integer> dp = new HashMap<>();
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        if (dp.containsKey(needs)) return dp.get(needs);
        int ans = 0;
        for (int i = 0; i < price.size(); i++) ans += price.get(i) * needs.get(i);
        for (int i = 0; i < special.size(); i++) {
            boolean isValid = true;
            for (int j = 0; j < needs.size(); j++) {
                if (special.get(i).get(j) > needs.get(j)) {
                    isValid = false;
                    break;
                }
            }
            if (isValid) {
                for (int j = 0; j < needs.size(); j++) {
                    needs.set(j, needs.get(j) - special.get(i).get(j));
                }
                int ans2 = special.get(i).get(needs.size()) + shoppingOffers(price, special, needs);
                ans = Math.min(ans, ans2);
                for (int j = 0; j < needs.size(); j++) {
                    needs.set(j, needs.get(j) + special.get(i).get(j));
                }
            }
        }
        dp.put(needs, ans);
        return ans;
    }
}
```

🔗 Similar Problems  
- 🎯 "Minimum Cost to Fill a Bag"  
- 🎯 "Coin Change Problem"  

🧐 Review Notes  
✅ Key insights: Use memoization to optimize recursive calls  
❌ Common mistakes: Forgetting to restore `needs` after recursion  
⚡ Optimization tips: Prune unneeded computations early  
