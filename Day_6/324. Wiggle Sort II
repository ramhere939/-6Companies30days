📝 Problem Name: Wiggle Sort  
📅 Date: [06-01-2025]  
🌍 Platform: [LeetCode]  
⚡ Difficulty: Medium  

🧐 Problem Understanding  
📌 Input/Output  
➡ Given an array `nums`, rearrange it such that:  
➡ `nums[0] < nums[1] > nums[2] < nums[3] > ...`  

📌 Constraints  
✅ `1 ≤ nums.length ≤ 5 × 10⁴`  
✅ `0 ≤ nums[i] ≤ 5000`  

📌 Edge Cases  
✅ Single element array  
✅ Already sorted or reverse sorted array  
✅ Large input sizes  

💡 Approach  

1️⃣ Initial Thoughts  
➡ Sorting and placing elements alternatively maintains the pattern  
➡ A max heap can help with order  

2️⃣ Optimal Solutions  

🔹 Approach 1: Max Heap (Priority Queue)  
📌 Idea  
➡ Store all elements in a max heap  
➡ Place the largest remaining elements at odd indices  
➡ Place remaining elements at even indices  

📌 Pseudocode  
➡ Insert all elements into a max heap  
➡ Iterate over odd indices (1, 3, 5...) and place the largest elements from the heap  
➡ Iterate over even indices (0, 2, 4...) and place the remaining elements  

🔹 Approach 2: Sorting + Two Pointers  
📌 Idea  
➡ Sort the array in ascending order  
➡ Use two pointers:  
🔹 One at the end for filling odd indices  
🔹 One at the middle for filling even indices  

📌 Pseudocode  
➡ Sort the input array  
➡ Use two pointers:  
🔹 One at the last index for odd positions  
🔹 One at the middle for even positions  
➡ Assign values in decreasing order  

🔹 Approach 3: Counting Sort (Bucket Array)  
📌 Idea  
➡ Since `nums[i]` is in the range 0 - 5000, create a frequency array  
➡ Fill elements from largest to smallest into odd and even indices  

📌 Pseudocode  
➡ Create a frequency array for numbers in range 0 - 5000  
➡ Start from the largest number and place elements at odd indices  
➡ Once odd indices are filled, place remaining elements at even indices  

🔹 Approach 4: In-Place Modification (Single Pass)  
📌 Idea  
➡ Iterate through the array and swap elements to maintain the wiggle property  
🔹 If `i` is even, ensure `nums[i] < nums[i+1]`  
🔹 If `i` is odd, ensure `nums[i] > nums[i+1]`  

📌 Pseudocode  
➡ Iterate through the nums array  
➡ If `i` is even and `nums[i] > nums[i+1]`, swap them  
➡ If `i` is odd and `nums[i] < nums[i+1]`, swap them  

⏳ Time & Space Complexity  
✅ Max Heap: `O(N log N)`  
✅ Sorting + Two Pointers: `O(N log N)`  
✅ Counting Sort: `O(N)`  
✅ In-Place Modification: `O(N)` time, `O(1)` space  

🖥 Code Template  
```java
class Solution {  
    public void wiggleSort(int[] nums) {  
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> Integer.compare(b, a));  
        int n = nums.length;  
        
        for (int num : nums) pq.add(num);  
        
        for (int i = 1; i < n; i += 2) nums[i] = pq.poll();  
        for (int i = 0; i < n; i += 2) nums[i] = pq.poll();  
    }  
}  
```

🔗 Similar Problems  
📌 Wiggle Subsequence  
📌 Dutch National Flag Problem  

📌 Review Notes  
✅ Key Insights: Sorting helps establish an alternating order  
⚠️ Common Mistakes: Incorrect element placement while iterating  
🚀 Optimization Tips: Use counting sort for an `O(N)` solution
