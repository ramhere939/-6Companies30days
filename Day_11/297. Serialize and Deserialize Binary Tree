📝 **Notes for GitHub**  

🔹 **Problem Statement**  
Serialize and deserialize a binary tree. Convert a tree into a string format and reconstruct it back into a tree.  

🔹 **Concept**  
- **Serialization:** Convert the tree into a **string** using level-order traversal (BFS).  
- **Deserialization:** Reconstruct the tree using the **string representation**.  

🔹 **Approach**  
✔ Use a **queue** for level-order traversal.  
✔ Append `"#"` for `null` nodes to maintain structure.  
✔ Use **space-separated values** for serialization.  
✔ While deserializing, **rebuild** the tree using the queue.  

🔹 **Pseudocode**  
```
Serialization:
1. If root is null, return empty string
2. Initialize a queue and add root
3. While queue is not empty:
   - Poll a node
   - If node is null, append "#"
   - Else, append value and add left/right child to queue
4. Return the built string

Deserialization:
1. If input is empty, return null
2. Split the string into an array
3. Create root and initialize a queue
4. Iterate through array:
   - Poll a node
   - If left child exists, create it and add to queue
   - If right child exists, create it and add to queue
5. Return the reconstructed tree
```

🔹 **Complexity**  
✔ **Time Complexity:** `O(N)` (Each node is processed once).  
✔ **Space Complexity:** `O(N)` (Queue stores nodes).  

🔹 **Optimized Code**  
```java
public String serialize(TreeNode root) {
    if (root == null) return "";
    Queue<TreeNode> q = new LinkedList<>();
    StringBuilder str = new StringBuilder();
    q.add(root);
    while (!q.isEmpty()) {
        TreeNode curr = q.poll();
        if (curr == null) {
            str.append("# ");
            continue;
        }
        str.append(curr.val + " ");
        q.add(curr.left);
        q.add(curr.right);
    }
    return str.toString();
}

public TreeNode deserialize(String data) {
    if (data.isEmpty()) return null;
    Queue<TreeNode> q = new LinkedList<>();
    String[] values = data.split(" ");
    TreeNode root = new TreeNode(Integer.parseInt(values[0]));
    q.add(root);
    for (int i = 1; i < values.length; i++) {
        TreeNode curr = q.poll();
        if (!values[i].equals("#")) {
            TreeNode left = new TreeNode(Integer.parseInt(values[i]));
            curr.left = left;
            q.add(left);
        }
        if (!values[++i].equals("#")) {
            TreeNode right = new TreeNode(Integer.parseInt(values[i]));
            curr.right = right;
            q.add(right);
        }
    }
    return root;
}
```
