

Find Repeated DNA Sequences  

Date: 03-01-2025  
Platform: LeetCode  
Difficulty: Medium  

Problem Understanding  
- Input: A string s consisting of characters 'A', 'C', 'G', and 'T'.  
- Output: Return all 10-letter-long sequences that appear more than once in s.  
- Constraints:  
  - 1 ≤ s.length ≤ 10⁵  
  - s consists only of 'A', 'C', 'G', and 'T'.  
- Edge Cases:  
  - s is shorter than 10 characters (no repeated sequences possible).  
  - s contains all unique sequences.  
  - s contains multiple overlapping repeated sequences.  

Approach  

1. Initial Thoughts  
   - A brute-force approach would extract every 10-character substring and check its frequency using nested loops, leading to an O(n²) solution.  
   - A more efficient approach involves using a HashSet to track seen sequences, reducing the time complexity to O(n).  

2. Optimized Solution (Sliding Window + HashSet)  
   - Use a sliding window of size 10 to extract substrings.  
   - Maintain two sets:  
     - str: Stores all encountered 10-letter substrings.  
     - ans: Stores repeated substrings.  
   - If a substring is already in str, add it to ans.  
   - Convert ans to a list and return the result.  

Time Complexity: O(n), as each substring is processed once.  
Space Complexity: O(n), for storing sequences in HashSets.  

Code:  
public List<String> findRepeatedDnaSequences(String s) {  
    Set<String> ans = new HashSet<>();  
    int i = 0, j = 10;  
    Set<String> str = new HashSet<>();  
    StringBuilder b = new StringBuilder(s);  
    for (; j < s.length() + 1; i++, j++) {  
        String temp = b.substring(i, j);  
        if (str.contains(temp)) ans.add(temp);  
        str.add(temp);  
    }  
    return new ArrayList<>(ans);  
}  

Similar Problems  
- Longest Repeating Substring  
- Substring with Concatenation of All Words  

Review Notes  

Key Insights  
- HashSet helps efficiently track sequences without extra comparisons.  
- Using a sliding window avoids redundant substring operations.  

Common Mistakes  
- Forgetting to check s.length() < 10 before processing.  
- Not using HashSet, leading to inefficient duplicate detection.  

Optimization Tips  
- Rolling hash (Rabin-Karp) or bit manipulation can further optimize performance.  
- If the input is very large, a trie-based solution could help reduce space usage.  

This format ensures clarity, readability, and GitHub-friendly formatting. Let me know if you need any refinements!
