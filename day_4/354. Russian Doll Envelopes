Russian Doll Envelopes  

Date: 06-01-2025  
Platform: LeetCode  
Difficulty: Hard  

Problem Understanding  
- Input: A 2D integer array envelopes, where envelopes[i] = [w, h] represents an envelope with width w and height h.  
- Output: Return the maximum number of envelopes that can be nested (one inside another).  
- Constraints:  
  - 1 ≤ envelopes.length ≤ 100000  
  - 1 ≤ envelopes[i][0], envelopes[i][1] ≤ 100000  
- Edge Cases:  
  - All envelopes have the same width.  
  - Envelopes are already sorted or completely unsortable.  

Approach  

1. Sorting and Longest Increasing Subsequence (LIS) Approach  
- Sorting Strategy:  
  - Sort envelopes by width in ascending order.  
  - If widths are equal, sort heights in descending order.  
  - This prevents incorrect nesting (i.e., prevents counting envelopes with the same width but increasing height).  
- Applying LIS:  
  - Extract heights and find the longest increasing subsequence (LIS) of heights.  
  - This results in an O(n log n) solution using binary search and LIS.  

2. Time and Space Complexity  
- Sorting: O(n log n)  
- Binary Search and LIS: O(n log n)  
- Overall Complexity: O(n log n), optimal for large constraints.  
- Space Complexity: O(n) for the dp array.  

Code Implementation  

public int maxEnvelopes(int[][] envelopes) {  
    Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);  
    int dp[] = new int[envelopes.length];  
    int maxLen = 0;  
    
    for (int i = 0; i < envelopes.length; i++) {  
        int idx = binarySearch(dp, 0, maxLen, envelopes[i][1]);  
        dp[idx] = envelopes[i][1];  
        if (idx == maxLen) maxLen++;  
    }  
    return maxLen;       
}  

public int binarySearch(int[] dp, int start, int end, int target) {  
    while (start < end) {  
        int mid = start + (end - start) / 2;  
        if (dp[mid] < target) start = mid + 1;  
        else end = mid;  
    }  
    return start;  
}  

Similar Problems  
- Longest Increasing Subsequence (O(n log n))  
- Box Stacking Problem  
- Patience Sorting  

Review Notes  

Key Insights  
- Sorting by decreasing height ensures that envelopes with the same width do not interfere with LIS.  
- The problem reduces to LIS on heights, which is solved using binary search efficiently.  

Common Mistakes  
- Sorting by (width, height) in ascending order instead of handling equal widths correctly.  
- Using O(n²) LIS instead of O(n log n).  

Optimization Tips  
- Use binary search (Arrays.binarySearch() or custom implementation) instead of O(n²) DP.  
- Sorting ensures that LIS finds valid nesting sequences efficiently.  

Let me know if you need refinements.
